#!/usr/bin/env python3

##########################################################################
#
# Written by Iddo Friedberg
# Copyright (C) 2016 Iddo Friedberg idoerg@gmail.com
#
#  This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
###########################################################################
import csv
import sys
import os
import argparse
from collections import defaultdict


def header_stuff(latex_path,header_file):
#    if os.path.isfile(latex_path):
#        raise FileExistsError("%s already exists. Choose another name or remove this file" % latex_path)
    latex_out = open(latex_path,"w")
    if header_file:
        header_text = open(header_file,'r').read()
        latex_out.write(header_text)
        latex_out.write('\n')
        header_file.close()
    latex_out.close()

#def affils_and_authors(csv_path,delimiter='\t',affildelim=';',affiliation="Affiliation",
#        firstname="First Name",middlename="Middle Name",lastname="Last Name"):
def affils_and_authors(csv_path,delimiter='\t',affildelim=';'):
    affil_num = 0
    current_affil_num = 0
    author_num = 0
    affil_dict = {}
    author_affil = defaultdict(list)
    author_list = []
    with open(csv_path) as author_file:
        auth_reader = csv.DictReader(author_file, delimiter=delimiter)
        firstname, middlename, lastname, affiliation = auth_reader.fieldnames
        for author in auth_reader:
            author_list.append(author)
            # split affiliations, if necessary
            affil_list = [i.strip() for i in author[affiliation].split(affildelim)]
            for affil in affil_list:
                author_key = ((author[firstname],
                               author[middlename],
                               author[lastname]))
                if affil in affil_dict:
                    current_affil_num = affil_dict[affil]
                else:
                    affil_num += 1
                    current_affil_num = affil_num
                    affil_dict[affil] = affil_num
                author_affil[author_key].append(current_affil_num)
    # sort affiliation keys if an author has more than one
    for author_key in author_affil:
        author_affil[author_key].sort() 
    return author_list, affil_dict, author_affil, firstname, middlename, lastname

def print_authors_affils(author_list,author_affil, affil_dict,latex_path,
                         firstname,middlename,lastname,
                         utf8=True):

    latex_out = open(latex_path,"a")
    affil_list = []
    for author in author_list:
        author_key = ((author[firstname],
                       author[middlename],
                       author[lastname]))
        affil_nums = author_affil[author_key]
        latex_out.write("\\author[")
        if len(affil_nums) > 1:
            for i in affil_nums[:-1]:
                latex_out.write("%d," % i)
        latex_out.write("%d]" % affil_nums[-1])
        latex_out.write("{%s %s %s}\n" % author_key)

    for affil in affil_dict: 
        affil_list.append( (affil_dict[affil],affil) )
    affil_list.sort()
    for affil_num, affil in affil_list:
        latex_out.write("\\affil[%d]" % affil_num)
        latex_out.write("{%s}\n" % escape_chars(affil))

    latex_out.close()

def print_authors_affils_simple(author_list,author_affil, affil_dict,latex_path,
                         firstname,middlename,lastname,
                         utf8=True):

    latex_out = open(latex_path,"a")
    affil_list = []
    n = 0
    for author in author_list:
        n += 1
        author_key = ((author[firstname],
                       author[middlename],
                       author[lastname]))
        affil_nums = author_affil[author_key]
        latex_out.write("{%s %s %s}" % author_key)
        latex_out.write("\\textsuperscript{")
        if len(affil_nums) > 1:
            for i in affil_nums[:-1]:
                latex_out.write("%d," % i)
        if n == len(author_list): # last author
            latex_out.write("%d}\n" % affil_nums[-1])
        else:
            latex_out.write("%d},\n" % affil_nums[-1])
    latex_out.write('\n\n')
    for affil in affil_dict: 
        affil_list.append( (affil_dict[affil],affil) )
    affil_list.sort()
    n = 0
    for affil_num, affil in affil_list:
        n += 1
        latex_out.write("\\textsuperscript{%d}" % affil_num)
#        if n < len(affil_list): # not last affiliation yet
        latex_out.write("{%s}\\\\ \n" % escape_chars(affil))

    latex_out.close()
def escape_chars(inline):
    # & % $ # _ { }
    escape_chars = {'&': '\&', 
            '%': '\%', 
            '$': '\$', 
            '#': '\#', 
            '_': '\_', 
            '{': '\{', 
            '}': '\}',
            '~': '\\textasciitilde',
            '^': '\\textasciicircum'}
    for c in escape_chars:
        inline = inline.replace(c,escape_chars[c])
    return inline

def footer_stuff(latex_path,footer_path,default_foot):
    latex_out = open(latex_path,"a")
    if footer_path:
        footer_text = open(footer_path,'r').read()
        latex_out.write(footer_text)
    elif default_foot:
        latex_out.write("\\setcounter{Maxaffil}{0}\n")
        latex_out.write("\\renewcommand\Authfont{\small}\n")
        latex_out.write("\\renewcommand\Affilfont{\itshape\\footnotesize}\n")
    latex_out.close()

def make_cli_parser():
    parser = argparse.ArgumentParser(prog="authorator")  
    parser.add_argument('-i','--infile', required=True, help='csv file containing authors and affiliations')
    parser.add_argument('-o','--outfile',required=True, help='LaTeX output file')
#    parser.add_argument('--firstname',default='First Name', help='Title of First Name column')
#    parser.add_argument('--lastname',default='Last Name', help='Title of Last Name column')
#    parser.add_argument('--middlename',default='Middle Name', help='Title of Middle Name column')
    parser.add_argument('--affiliation',default='Affiliation', help='Title of Affiliation column')
    parser.add_argument('--delim','-d',default='\t', help='csv field delimiter. Default <tab>')
    parser.add_argument('--affildelim','-a',default=';', help='affiliations delimiter. Default ";"')
    parser.add_argument('--headerfile', default=None,help="file with header text")
    parser.add_argument('--footerfile', default=None,help="file with footer text")
    parser.defaultfoot = True
    parser.add_argument('--simple', '-s', action="store_true",  
                        help="simple mode: do not use authblk")
    parser.add_argument('--no-defaultfoot', dest='defaultfoot', action='store_false',
                                             help="Don't use default footer text")
#    parser.add_argument('--license', help="GPL v3.0 license")

    # Don't change the following. Did not implement yet.
    parser.add_argument('--utf8','-u',default='T',choices=['T','t','F','f'], 
                         help="output in UTF8(default). ASCII output not implemented yet.")
    return parser

def license():
    print()
    print("AUTHORATOR  Copyright (C) 2016  Iddo Friedberg")
    print("This program comes with ABSOLUTELY NO WARRANTY.")
    print("This is free software, and you are welcome to redistribute it")
    print("under certain conditions")
    print("See details in the License copy provided with this software or at")
    print("http://www.gnu.org/licenses/gpl-3.0.en.html")
    print()
    print()

if __name__ == '__main__':
    license()
    booldict = {'F': False,'T':True}
    parser = make_cli_parser()
    cli = parser.parse_args()
    header_stuff(cli.outfile,header_file=cli.headerfile)
    author_list, affil_dict, author_affil,firstname, middlename,lastname = affils_and_authors(cli.infile,
                                           delimiter=cli.delim,
                                           affildelim=cli.affildelim)
    if cli.simple:
        print_authors_affils_simple(author_list, author_affil, 
                  affil_dict, cli.outfile,
                  utf8=booldict[cli.utf8.upper()],
                  firstname=firstname,
                  middlename=middlename,
                  lastname=lastname)
    else:
        print_authors_affils(author_list, author_affil, 
                  affil_dict, cli.outfile,
                  utf8=booldict[cli.utf8.upper()],
                  firstname=firstname,
                  middlename=middlename,
                  lastname=lastname)
        footer_stuff(cli.outfile,cli.footerfile,cli.defaultfoot)
            


